<!-- For any problems, see the README file in this directory.

     A "project" describes a set of targets that may be requested
     when Ant is executed.  The "default" attribute defines the
     target which is executed if no specific target is requested,
     and the "basedir" attribute defines the current working directory
     from which Ant executes the requested task.  This is normally
     set to the current working directory.
-->


<project name="snsrtree" default="compile" basedir=".">


<!-- Property Definitions

     Each of the following properties are used by convention in this
     build file.  The values specified can be overridden at run time by
     adding a "-Dname=value" argument to the command line that invokes Ant.
     This technique is normally used to copy the values of the ANT_HOME
     and TOMCAT_HOME environment variables into the "ant.home" and
     "tomcat.home" properties, which are normally not defined explicitly.

     app.name          Base name of this application, used to
                       construct filenames and directories.

     deploy.home       The name of the directory into which the
                       deployment hierarchy will be created.
                       Normally, this will be the name of a
                       subdirectory under $TOMCAT_HOME/webapps.

     dist.home         The name of the base directory in which
                       distribution files are created.

     dist.src          The name of the distribution JAR file
                       containing the application source code,
                       to be stored in the "dist.home" directory.
                       This filename should end with ".jar".

     dist.war          The name of the Web ARchive (WAR) file
                       containing our deployable application.
                       This filename should end with ".war".

     javadoc.home      The name of the base directory in which
                       the JavaDoc documentation for this application
                       is generated.

     tomcat.home       The name of the base directory in which
                       Tomcat has been installed.  This value is
                       normally set automatically from the value
                       of the TOMCAT_HOME environment variable.


-->

  <!-- Set the variable "tomcat.home" to "/www/snsrtree.rutgers.edu" 
       or "/usr/local/tomcat", as appropriate. The "condition" 
       command first tests the former location, and if there is no such
       path on your machine, uses the second location.

       You may not actually need tomcat.home if you have the environment
       variable    $TOMCAT_HOME set.  -->

  <property name="tomcat.home.rutgers"  value="/www/snsrtree.rutgers.edu" />
 
  <condition property="tomcat.home" value="${tomcat.home.rutgers}" else="/usr/local/tomcat">
  <available file="${tomcat.home.rutgers}"/>
  </condition>

  <echo message="tomcat.home=${tomcat.home}"/>

  <!-- the location of files that will appear at the "root" of our
  website (regardless of whether it's localhost or
  snsrtree.rutgers.edu) -->
  <condition property="tomcat.deploy.docs" value="${tomcat.home}/htdocs" else="${tomcat.home}/webapps/ROOT">
  <available file="${tomcat.home.rutgers}"/>
  </condition>


  <!-- property name="tomcat.home"     value="/www/snsrtree.rutgers.edu" / -->

  <property name="app.name"       value="dd"/>
  <property name="deploy.home"    value="${tomcat.home}/webapps/${app.name}"/>
  <property name="dist.home"      value="${deploy.home}"/>
  <property name="dist.src"       value="${app.name}.jar"/>
  <property name="dist.war"       value="${app.name}.war"/>
  <!-- property name="javadoc.home"   value="${deploy.home}/javadoc"/ -->
  <property name="javadoc.home"   value="webroot/javadoc"/>
 
  <!-- The directory for temporary files (used during installation) -->
  <property name="tmp"   value="/tmp" />

  <!-- Tomcat libraries; for Tomcat 6.* -->
  <property name="tomcat.lib.rutgers"     value="/usr/local/tomcat55/common/lib"/>

  <condition property="tomcat.lib" value="${tomcat.lib.rutgers}" else="/usr/local/tomcat/lib">
  <available file="${tomcat.lib.rutgers}" property="tomcat.lib" value="${tomcat.lib.rutgers}"/>
  </condition>

  <echo message="tomcat.lib=${tomcat.lib}"/>

  <!-- Our web application's library directory and classes directory -->
  <property name="deploy.lib"      value="${deploy.home}/WEB-INF/lib" />
  <property name="deploy.classes"  value="${deploy.home}/WEB-INF/classes" />
  <property name="local.classes"  value="classes" />

   <property name="compilelocal.classpath" 
     value="../batik-1.7/batik.jar" />

   <property name="compile.classpath" 
     value="${compilelocal.classpath}:${tomcat.lib}/servlet-api.jar:${tomcat.lib}/catalina-ant.jar:lib/commons-fileupload-1.2.1.jar" />

  <!-- Options to pass to JVM, when Java programs are run in auxiliary
  scripts. This may be used to set -Dhttp.proxyHost=... etc. -->
  <property name="util.java.opts"  value="" />
   

  <!-- The nickname of your code-signing certificate, and the password -->

  <property name="sign.cert"   value="VladimirsTestCert"/>
  <property name="sign.pass"   value="cerpa"/>

<!--
 <property name="sign.cert"   value="Rutgers University's Thawte Consulting cc ID" />
  <property name="sign.pass"   value="cerpa"/>
  <property name="sign.store"   value="USRUTG36.p12"/>
-->

<!-- The "prepare" target is used to construct the deployment home
     directory structure (if necessary), and to copy in static files
     as required.  In the example below, Ant is instructed to create
     the deployment directory, copy the contents of the "web/" source
     hierarchy, and set up the WEB-INF subdirectory appropriately.

-->

<target name="preparelocal">
  <mkdir  dir="${local.classes}"/>
</target>

<target name="prepare">
  <mkdir  dir="${deploy.home}"/>
  <!-- mkdir  dir="${deploy.home}/applet"/ -->
  <mkdir  dir="${deploy.home}/WEB-INF"/>
  <mkdir  dir="${deploy.classes}"/>
  <!-- copy  file="etc/pages.sh" todir="${deploy.classes}"/ -->
  <mkdir  dir="${deploy.lib}"/>
  <mkdir  dir="${javadoc.home}"/>
</target>


<!-- The "clean" target removes the deployment home directory structure,
     so that the next time the "compile" target is requested, it will need
     to compile everything from scratch.
-->

<target name="clean">
  <delete dir="${deploy.home}"/>
  <delete dir="${local.classes}"/>
</target>


<!-- The "compile" target is used to compile (or recompile) the Java classes
     that make up this web application.  The recommended source code directory
     structure makes this very easy because the <javac> task automatically
     works its way down a source code hierarchy and compiles any class that
     has not yet been compiled, or where the source file is newer than the
     class file.

     Feel free to adjust the compilation option parameters (debug,
     optimize, and deprecation) to suit your requirements.  It is also
     possible to base them on properties, so that you can adjust this
     behavior at runtime.

     The "compile" task depends on the "prepare" task, so the deployment
     home directory structure will be created if needed the first time.


           classpath=
	   "${deploy.classes}:${tomcat.lib}/servlet.jar:${netscape.classpath}:lib/mail.jar"
	   target="1.1" optimize="off" deprecation="off" 
-->

<echo message="compile.classpath=${compile.classpath}"/>

<target name="compile" depends="preparelocal">
  <echo>    Compiling Java files  </echo>
  <javac srcdir="src" destdir="${local.classes}" debug="on"   target="1.5"
	 classpath="${compile.classpath}" />
  <echo>    Building a jar file  </echo>
  <jar destfile="lib/dndo.jar"   basedir="${local.classes}"  />
</target>

<!-- target name="jar" depends="compile">
<jar destfile="lib/dndo.jar"   basedir="${local.classes}"  />
</target -->

<!-- copies our class files, as well as some libraries (such as Apache Commons
     FileUpload to our web application's directory in the Tomcat tree -->
  <!-- copy todir="${deploy.classes}/">   <fileset dir="${local.classes}"  />  </copy --> 
  <!-- copy   todir="${deploy.classes}">
       <fileset dir="src" includes="**/*.properties,**/*.conf"/>
  </copy -->
<target name="deploy"  depends="prepare,compile">
  <copy  file="etc/web.xml" tofile="${deploy.home}/WEB-INF/web.xml"/>
  <mkdir  dir="${deploy.home}/WEB-INF/sensors"/>
  <copy todir="${deploy.home}/WEB-INF/sensors">
    <fileset dir="sensors"><include name="**/*.txt"/></fileset>    
  </copy>
  <copy todir="${deploy.lib}">
    <fileset dir="../batik-1.7/lib"><include name="**/*.jar"/></fileset>    
  <!-- /copy>
  <copy todir="${deploy.lib}" -->  
    <fileset dir="lib"><include name="**/*.jar"/></fileset>
  </copy>

  <echo message="Copying files from web/ to ${deploy.home}" />
  <copy todir="${deploy.home}">
    <fileset dir="web" excludes=".svn" />
  </copy>

  <echo message="Copying files from webroot/ to ${tomcat.deploy.docs}" />
  <copy todir="${tomcat.deploy.docs}">
    <fileset dir="webroot" excludes=".svn" />
  </copy>

</target>

<property name="reloadclass.correct" value="org.apache.catalina.ant.ReloadTask"/>

<echo message="reloadclass.correct=${reloadclass.correct}"/>

<condition property="reloadclass" value="${reloadclass.correct}" else="">
  <available classname="${reloadclass.correct}"
	     classpath="${compile.classpath}"/>
</condition>

<echo message="reloadclass=${reloadclass}"/>

<property name="url" value="http://localhost:8080/manager"/>
<taskdef name="reload"    classname="${reloadclass}"
	 classpath="${compile.classpath}"/>

  
<target name="reload" description="Reload web application on localhost"
        depends="deploy">
  <reload url="${url}" username="vmenkov" password="tomcat" path="/${app.name}"/>
</target>

<!-- The "javadoc" target is used to create the Javadoc API documentation
     for the Java classes in this web application. 
-->

<target name="javadoc" depends="prepare">
  <exec executable="grep" outputproperty="dndo.ver">
    <arg line="version src/dd/engine/Main.java"/>
    <redirector >
      <outputfilterchain >
	<replaceregex pattern="[^0-9\. \-]" replace="" flags="g"/>
      </outputfilterchain>
    </redirector>
  </exec>
 
<!--	   Package="true" -->
  <javadoc sourcepath="src" packagenames="dd.*"
	   classpath="${compile.classpath}"   
	   destdir="${javadoc.home}"
           use="true"
	   link="http://java.sun.com/j2se/1.5.0/docs/api/"
	   header="&lt;em&gt;SNSRTREE ${dndo.ver}&lt;/em&gt;"   
	   windowtitle="SNSRTREE API" 
	   overview="overview.html"/>

</target>

<!-- Archives source code, compiled classes, and libraries -->
<target name="zip" depends="compile">
  <zip destfile="../snsrtree.zip">
    <zipfileset dir="." prefix="snsrtree"  
		excludes="classes/**,**/.svn,**/*.bak,**/*.orig,**/*~,run.sh"/>
    <zipfileset prefix="snsrtree" file="run.sh" filemode="755" />
  </zip>
  <exec executable="grep">
      <arg line="version src/dd/engine/Main.java"/>
  </exec>
</target>


 <!-- zip destfile="../snsrtree.zip" basedir="." >
       includes="snsrtree/**" excludes="snsrtree/classes/**,**/*.bak,**/*.java.orig,**/*~"    / -->


<!-- The "all" target rebuilds everything by executing the "clean"
     target first, which forces the "compile" target to compile all
     source code instead of just the files that have been changed.
-->

  <!-- target name="all" depends="clean,prepare,compile,sign,javadoc"/ -->


<!-- The "dist" target builds the distribution Web ARchive (WAR) file
     for this application, suitable for distribution to sites that wish
     to install your application.  It also creates a JAR file containing
     the source code for this application, if you wish to distribute
     that separately.
-->

  <!-- target name="dist" depends="prepare,compile,sign">

    <delete file="${dist.home}/${dist.src}"/>
    <delete file="${dist.home}/${dist.war}"/>

    <jar jarfile="/tmp/${dist.src}"      basedir="."/>
    <jar jarfile="/tmp/${dist.war}"     basedir="${deploy.home}"/>

    <copy todir="${dist.home}"  file="/tmp/${dist.war}"/>
    <copy todir="${dist.home}"  file="/tmp/${dist.src}"/>
  </target -->


</project>


